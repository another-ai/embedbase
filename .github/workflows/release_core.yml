name: Embedbase core release

on:
  push:
    branches:
      - main
      - next
      - rc
    paths:
      - "embedbase/**"
      # when pyproject.toml changes
      - "pyproject.toml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.event.head_commit.message }}
          regex: "^Release core ([^ ]+)"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: |
          poetry install

      - name: Read EMBEDBASE_TEST_CONFIG JSON secret and write it to config.yaml
        if: ${{ steps.regex-match.outputs.match != '' }}
        env:
          EMBEDBASE_TEST_CONFIG: ${{ secrets.EMBEDBASE_TEST_CONFIG }}
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O yq
          chmod +x yq
          echo $EMBEDBASE_TEST_CONFIG | yq -P > config.yaml

      - name: Run tests
        if: ${{ steps.regex-match.outputs.match != '' }}
        run: |
          docker run --rm --name pgvector -e POSTGRES_DB=embedbase -e POSTGRES_PASSWORD=localdb -p 5432:5432 -p 8080:8080 -d ankane/pgvector
          while ! docker exec pgvector pg_isready -U postgres; do sleep 1; done
          poetry run pytest --ignore=sdk/embedbase-js --ignore=hosted
          docker stop pgvector

      - name: Build package
        run: |
          poetry build

      - name: Publish to PyPI
        if: ${{ steps.regex-match.outputs.match != '' }}
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish

      - uses: rickstaa/action-create-tag@v1
        if: ${{ steps.regex-match.outputs.match != '' }}
        id: "tag_create"
        with:
          tag: core-${{ steps.regex-match.outputs.group1 }}
          tag_exists_error: true
          message: ${{ github.event.head_commit.message }}

      - name: Create Release
        if: ${{ steps.regex-match.outputs.match != '' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: core-${{ steps.regex-match.outputs.group1 }}
          name: core-${{ steps.regex-match.outputs.group1 }}
          draft: false
          prerelease: false
          # TODO: iterate on this changelog thing later
          body: ${{ github.event.head_commit.message }}
